from langchain_community.vectorstores import FAISS
from langchain_community.document_loaders import DirectoryLoader
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter
import os
import shutil

print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
loader = DirectoryLoader(path="data/rag_docs", glob="**/*.md")
docs = loader.load()
print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(docs)}")

splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=100)
chunks = splitter.split_documents(docs)
print(f"‚úÇÔ∏è –ß–∞–Ω–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {len(chunks)}")

print("ü§ñ –ü–æ–ª—É—á–∞–µ–º embedding —á–µ—Ä–µ–∑ MiniLM (HuggingFace)...")
embedding = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")

index_path = "faiss_index"
if os.path.exists(index_path):
    print("üóë –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å...")
    shutil.rmtree(index_path)

print("üß± –°—Ç—Ä–æ–∏–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å FAISS...")
db = FAISS.from_documents(chunks, embedding)
db.save_local(index_path)
print(f"‚úÖ –ù–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {index_path}")
